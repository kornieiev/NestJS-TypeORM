import { ExpressRequestInterface } from '@app/types/expressRequest.interface';
import { createParamDecorator, ExecutionContext } from '@nestjs/common';
// createParamDecorator позволяет создавать пользовательские декораторы
// Декораторы - это функции, которые могут изменять поведение классов, методов или свойств
// Декораторы могут использоваться для добавления метаданных, валидации, логирования и других задач
// ExecutionContext - это интерфейс, который предоставляет контекст выполнения, в котором был вызван декоратор
// Он позволяет получить доступ к объекту запроса, ответу и другим данным, связанным с выполнением запроса
// Например, мы можем использовать ExecutionContext для получения объекта запроса и извлечения данных из него

export const User = createParamDecorator((data: any, ctx: ExecutionContext) => {
  const request = ctx.switchToHttp().getRequest<ExpressRequestInterface>(); // Получаем объект запроса из контекста
  // Также можно использовать ctx.switchToRpc().getContext() для получения контекста RPC
  // RPC - это Remote Procedure Call, который используется для взаимодействия между сервисами
  // Он может быть использован в микросервисной архитектуре, например, для обмена сообщениями между сервисами
  // Или ctx.switchToWs().getClient() для получения клиента WebSocket
  //   console.log('DECORATOR - request', request);

  if (!request.user) {
    return null; // Если пользователь не авторизован, возвращаем null
  }

  if (data) {
    return request.user[data]; // Если передан параметр data, то возвращаем только его значение. В даком случае, это будет id пользователя
  }

  return request.user; // Иначе возвращаем объект пользователя из запроса
});

// Этот декоратор позволяет нам извлекать данные пользователя из запроса
// Например, мы можем использовать его для получения текущего пользователя в контроллере
// Он будет извлекать данные пользователя из объекта запроса, который был добавлен в middleware
// или guard, например, при аутентификации пользователя
// Декоратор User позволяет нам использовать его в методах контроллера, чтобы получить
// данные текущего пользователя, например, для получения информации о пользователе,
// проверки прав доступа или выполнения других операций, связанных с пользователем
