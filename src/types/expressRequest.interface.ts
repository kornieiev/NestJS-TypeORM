import { UserEntity } from '@app/user/user.entity';
import { Request } from 'express';

export interface ExpressRequestInterface extends Request {
  user?: UserEntity | null; // Опциональное поле user, которое может содержать информацию о текущем пользователе
}

// Это пример интерфейса для расширения стандартного интерфейса Request из Express.
// Он добавляет опциональное поле user, которое может содержать информацию о текущем пользователе.
// Это поле может быть установлено в middleware, например, в AuthMiddleware, после проверки токена авторизации.
// Если пользователь авторизован, то поле user будет содержать объект UserEntity,
// если пользователь не авторизован, то поле user будет равно null.
// Этот интерфейс может быть использован в контроллерах и сервисах для доступа к информации о текущем пользователе,
// что позволяет централизованно обрабатывать авторизацию и доступ к защищенным ресурсам приложения
// и устанавливать пользователя в запрос для дальнейшей обработки в контроллерах и сервисах приложения.
// Это позволяет использовать типизацию TypeScript для проверки наличия пользователя в запросе и предотвращения
// ошибок при доступе к полям пользователя, если он не авторизован.
// Например, в контроллере можно использовать этот интерфейс для получения текущего пользователя из запросе и проверки его наличия перед выполнением каких-либо действий, связанных с пользователем.
// Это позволяет улучшить безопасность и надежность приложения, предотвращая доступ к защищенным ресурсам для неавторизованных пользователей.
// Также это позволяет использовать TypeScript для проверки типов и предотвращения ошибок при доступ
// к полям пользователя, если он не авторизован, что улучшает качество кода
// и делает его более читаемым и понятным для других разработчиков.
